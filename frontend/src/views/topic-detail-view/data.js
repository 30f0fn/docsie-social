const data = {
    detailed_topic: {name: "rust",
                     slug: "rust",
                     description: "Rust is a systems programming language without a garbage collector focused on three goals: safety, speed, and concurrency."},
    connected_topics: [{name: "systems programming",
                        slug: "systems-programming",
                        description: "System programming is the activity of computer programming system software. The primary distinguishing characteristic of systems programming when compared to application programming is that application programming aims to produce software which provides services to the user, whereas systems programming aims to produce software which provides services to the computer hardware."},
                       {name: "concurrency",
                        slug: "concurrency",
                        description: "concurrency is a property of systems in which multiple computations can be performed in overlapping time periods. The computations may be executing on multiple cores in the same chip, preemptively time-shared threads on the same processor, or executed on physically separated processors."}
                      ],
    trending_communities: [
        {name: "Open Source Maintainers",
         slug: "Open Source Maintainers",
         description: "It brings in maintainers from all over the GitHub community to discuss and talk about anything."
        },
        {name: "OpenGenus Foundation",
         slug: "OpenGenus Foundation",
         description: "This pick has the distinction of becoming peopleâ€™s favorite in a short time.Their approach to bring the web offline is what attracted me to join their community and it was amazing. "
        },
        {name: "CocoaPods",
         slug: "CocoaPods",
         description: "People are impressed by the way they represent their contributor base by giving everyone a dynamic place."
        },
        
    ],
    active_communities: [
        {name: "DuckDuckGo",
         slug: "DuckDuckGo",
         description: "A community of 500+ members around building the first-choice privacy focused search engine. Apart from their popularity, their open-source community defines itself with its contributions in building up data. "},
        {name: "GitHub Campus Experts",
         slug: "GitHub Campus Experts",
         description: "A 600+ community of students involved in promoting open-source under the flag of GitHub. I saw this community from the very first day."},
        {name: "FreeCodeCamp",
         slug: "FreeCodeCamp",
         description: "It is a non-profit organization that consists of an interactive learning web platform, an online community forum, chat rooms, online publications and local organizations that intend to make learning web development accessible to anyone."},
    ],
    top_docs: [
        {title: "What are Rust's exact auto-dereferencing rules?",
                id: "28519997",
                excerpt: "I'm learning/experimenting with Rust, and in all the elegance that I find in this language, there is one peculiarity that baffles me and seems totally out of place.\n Rust automatically dereferences pointers when making method calls."},
               {title: "Why are Rust executables so huge?",
                id: "29008127",
                excerpt: "Rust uses static linking to compile its programs, meaning that all libraries required by even the simplest Hello world! program will be compiled into your executable. This also includes the Rust runtime."},
        {title: "What are Rust's exact auto-dereferencing rules?",
                id: "28519997",
                excerpt: "I'm learning/experimenting with Rust, and in all the elegance that I find in this language, there is one peculiarity that baffles me and seems totally out of place.\n Rust automatically dereferences pointers when making method calls."},
               {title: "Why are Rust executables so huge?",
                id: "29008127",
                excerpt: "Rust uses static linking to compile its programs, meaning that all libraries required by even the simplest Hello world! program will be compiled into your executable. This also includes the Rust runtime."},
        {title: "What are Rust's exact auto-dereferencing rules?",
                id: "28519997",
                excerpt: "I'm learning/experimenting with Rust, and in all the elegance that I find in this language, there is one peculiarity that baffles me and seems totally out of place.\n Rust automatically dereferences pointers when making method calls."},
               {title: "Why are Rust executables so huge?",
                id: "29008127",
                excerpt: "Rust uses static linking to compile its programs, meaning that all libraries required by even the simplest Hello world! program will be compiled into your executable. This also includes the Rust runtime."},
        {title: "What are Rust's exact auto-dereferencing rules?",
                id: "28519997",
                excerpt: "I'm learning/experimenting with Rust, and in all the elegance that I find in this language, there is one peculiarity that baffles me and seems totally out of place.\n Rust automatically dereferences pointers when making method calls."},
               {title: "Why are Rust executables so huge?",
                id: "29008127",
                excerpt: "Rust uses static linking to compile its programs, meaning that all libraries required by even the simplest Hello world! program will be compiled into your executable. This also includes the Rust runtime."},
        {title: "What are Rust's exact auto-dereferencing rules?",
                id: "28519997",
                excerpt: "I'm learning/experimenting with Rust, and in all the elegance that I find in this language, there is one peculiarity that baffles me and seems totally out of place.\n Rust automatically dereferences pointers when making method calls."},
               {title: "Why are Rust executables so huge?",
                id: "29008127",
                excerpt: "Rust uses static linking to compile its programs, meaning that all libraries required by even the simplest Hello world! program will be compiled into your executable. This also includes the Rust runtime."},
        {title: "What are Rust's exact auto-dereferencing rules?",
                id: "28519997",
                excerpt: "I'm learning/experimenting with Rust, and in all the elegance that I find in this language, there is one peculiarity that baffles me and seems totally out of place.\n Rust automatically dereferences pointers when making method calls."},
               {title: "Why are Rust executables so huge?",
                id: "29008127",
                excerpt: "Rust uses static linking to compile its programs, meaning that all libraries required by even the simplest Hello world! program will be compiled into your executable. This also includes the Rust runtime."},
    ]
}


export default data;
